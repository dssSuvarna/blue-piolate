package com.bluepilot.test.generators

import com.bluepilot.entities.EmployeeSalary
import com.bluepilot.enums.EmployeeSalaryStatus
import com.bluepilot.enums.Month
import java.math.BigDecimal
import java.sql.Date
import java.time.Instant

object EmployeeSalaryGenerator {
    fun getEmployeeSalary(
        userId: Long,
        basic: BigDecimal = BigDecimal(100.00),
        hra: BigDecimal = BigDecimal(100.00),
        specialAllowances: BigDecimal = BigDecimal(100.00),
        performanceIncentive: BigDecimal = BigDecimal(100.00),
        pt: BigDecimal = BigDecimal(100.00),
        it: BigDecimal = BigDecimal(100.00),
        pf: BigDecimal = BigDecimal(100.00),
        esi: BigDecimal = BigDecimal(100.00),
        advance: BigDecimal = BigDecimal(10.0),
        designation: String = "Software Engineer",
        doj: Date = Date(Instant.now().toEpochMilli()),
        employeeCode: String = "empcode01",
        grossDeductions: BigDecimal = BigDecimal(10.0),
        grossEarning: BigDecimal = BigDecimal(10.0),
        grossPay: BigDecimal = BigDecimal(10.0),
        month: Month = Month.APRIL,
        year: Int = 2000,
        oneTimeIncentive: BigDecimal = BigDecimal(10.0),
        panNo: String = "123abc",
        totalPayableDays: BigDecimal = BigDecimal(30.0),
        totalWorkingDays: BigDecimal = BigDecimal(30.0),
        ytdBasic: BigDecimal = BigDecimal(10.0),
        ytdBonus: BigDecimal = BigDecimal(10.0),
        ytdDeductions: BigDecimal = BigDecimal(10.0),
        ytdEarnings: BigDecimal = BigDecimal(10.0),
        ytdEsi: BigDecimal = BigDecimal(10.0),
        ytdHra: BigDecimal = BigDecimal(10.0),
        ytdOtherDeductions: BigDecimal = BigDecimal(10.0),
        ytdPf: BigDecimal = BigDecimal(10.0),
        ytdPt: BigDecimal = BigDecimal(10.0),
        ytdSpecialAllowances: BigDecimal = BigDecimal(10.0),
        ytdIt: BigDecimal = BigDecimal(10.0),
        ytdPmEarnings: BigDecimal = BigDecimal(10.0),
        ytdPmBasic: BigDecimal = BigDecimal(10.0),
        ytdPmHra: BigDecimal = BigDecimal(10.0),
        ytdPmSpecialAllowances: BigDecimal = BigDecimal(10.0),
        ytdPmBonus: BigDecimal = BigDecimal(10.0),
        ytdPmPf: BigDecimal = BigDecimal(10.0),
        ytdPmEsi: BigDecimal = BigDecimal(10.0),
        ytdPmPt: BigDecimal = BigDecimal(10.0),
        ytdPmIt: BigDecimal = BigDecimal(10.0),
        ytdPmOtherDeductions: BigDecimal = BigDecimal(10.0),
        ytdPmDeductions: BigDecimal = BigDecimal(10.0),
        createdAt: Date = Date(Instant.now().toEpochMilli()),
        status: EmployeeSalaryStatus = EmployeeSalaryStatus.TO_BE_VERIFIED
    ): EmployeeSalary {
        return EmployeeSalary(
            userId = userId,
            basic = basic,
            hra = hra,
            specialAllowances = specialAllowances,
            performanceIncentive = performanceIncentive,
            pt = pt,
            it = it,
            pf = pf,
            esi = esi,
            advance = advance,
            designation = designation,
            doj = doj,
            employeeCode = employeeCode,
            grossDeductions = grossDeductions,
            grossEarning = grossEarning,
            grossPay = grossPay,
            month = month,
            year = year,
            oneTimeIncentive = oneTimeIncentive,
            panNo = panNo,
            totalPayableDays = totalPayableDays,
            totalWorkingDays = totalWorkingDays,
            ytdBasic = ytdBasic,
            ytdBonus = ytdBonus,
            ytdDeductions = ytdDeductions,
            ytdEarnings = ytdEarnings,
            ytdEsi = ytdEsi,
            ytdHra = ytdHra,
            ytdOtherDeductions = ytdOtherDeductions,
            ytdPf = ytdPf,
            ytdPt = ytdPt,
            ytdSpecialAllowances = ytdSpecialAllowances,
            ytdIt = ytdIt,
            ytdPmEarnings = ytdPmEarnings,
            ytdPmBasic = ytdPmBasic,
            ytdPmHra = ytdPmHra,
            ytdPmSpecialAllowances = ytdPmSpecialAllowances,
            ytdPmBonus = ytdPmBonus,
            ytdPmPf = ytdPmPf,
            ytdPmEsi = ytdPmEsi,
            ytdPmPt = ytdPmPt,
            ytdPmIt = ytdPmIt,
            ytdPmOtherDeductions = ytdPmOtherDeductions,
            ytdPmDeductions = ytdPmDeductions,
            createdAt = createdAt,
            status = status
        )
    }
}